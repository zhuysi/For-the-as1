// SPDX-License-Identifier: MIT
pragma solidity >=0.6.12 <0.9.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract AstanaToken is ERC20 {
    // Address of the contract deployer
    address private owner;

    // Event to log transaction details
    event TransactionDetails(address indexed sender, address indexed receiver, uint256 amount, uint256 timestamp);

    constructor() ERC20("astanait_Zhanat_Murzasheva", "AZM") {
        owner = msg.sender;
        _mint(owner, 2000 * (10**uint256(decimals())));
    }

    // Function to return the block timestamp of the latest transaction in a human-readable format
    function getLatestTransactionTimestamp() external view returns (string memory) {
        require(totalSupply() > 0, "No transactions yet");
        uint256 timestamp = block.timestamp;
        return formatTimestamp(timestamp);
    }

    // Function to retrieve the address of the transaction sender
    function getTransactionSenderAddress() external view returns (address) {
        require(totalSupply() > 0, "No transactions yet");
        return msg.sender;
    }

    // Function to retrieve the address of the transaction receiver
    function getTransactionReceiverAddress() external view returns (address) {
        require(totalSupply() > 0, "No transactions yet");
        return owner;
    }

    // Internal function to format timestamp to a human-readable format
    function formatTimestamp(uint256 timestamp) internal pure returns (string memory) {
        return timestampToString(timestamp);
    }

    // Internal function to convert timestamp to a string
    function timestampToString(uint256 timestamp) internal pure returns (string memory) {
        return string(abi.encodePacked(timestamp));
    }
}
